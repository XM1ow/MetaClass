//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""8f494589-2798-4bd8-8c87-18d2661c7998"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""84a0e88b-5107-4f80-aa46-4553870f9736"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Speak"",
                    ""type"": ""Button"",
                    ""id"": ""024c094d-f10f-4290-b6d7-b609d73c1cde"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""7ff4a562-2764-43ef-8c16-8b60e7d178ef"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ab57fc1f-ed5c-43f5-ae30-a937bfe5a512"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e63ba1d1-b8a2-484f-94de-b8994bd26b5b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1efa34ea-e408-45a3-a096-cb0a525d4283"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""01b3257a-bac1-4528-b229-7e4cb426e7fc"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d1e73232-cf76-4f9c-bf45-51843cfa8b2f"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f373442-941d-4f3e-82ad-ce821297595c"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Speak"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SlidesControl"",
            ""id"": ""3db64103-5fde-4ad6-808f-8dfde87f6531"",
            ""actions"": [
                {
                    ""name"": ""FirstPage"",
                    ""type"": ""Button"",
                    ""id"": ""af0c7232-45fa-4eac-ac65-f11cc284f9f4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LastPage"",
                    ""type"": ""Button"",
                    ""id"": ""1c31f4f0-8984-43fe-a542-88fecb1c352f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PreviousPage"",
                    ""type"": ""Button"",
                    ""id"": ""5e6dac9f-d2cd-459c-9d47-2974eca36734"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextPage"",
                    ""type"": ""Button"",
                    ""id"": ""0825f887-3628-4e8c-b468-a9740a79112f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Load"",
                    ""type"": ""Button"",
                    ""id"": ""06ab02d6-6ed9-4b44-8b5e-3089bc79c0af"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""871248ed-6915-42ba-9bdc-3cb4af9de5ad"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e96614b-a7dd-40ce-87f7-8172029093ce"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LastPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dec5e3fc-d942-42e5-a3c5-39c7b7bea1e5"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4438c503-9912-46ba-a065-50f2d2d8b84c"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94f70a3c-0d49-4aa1-80c7-9c5e751b044d"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Load"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Default"",
            ""bindingGroup"": ""Default"",
            ""devices"": []
        }
    ]
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Movement = m_Gameplay.FindAction("Movement", throwIfNotFound: true);
        m_Gameplay_Speak = m_Gameplay.FindAction("Speak", throwIfNotFound: true);
        // SlidesControl
        m_SlidesControl = asset.FindActionMap("SlidesControl", throwIfNotFound: true);
        m_SlidesControl_FirstPage = m_SlidesControl.FindAction("FirstPage", throwIfNotFound: true);
        m_SlidesControl_LastPage = m_SlidesControl.FindAction("LastPage", throwIfNotFound: true);
        m_SlidesControl_PreviousPage = m_SlidesControl.FindAction("PreviousPage", throwIfNotFound: true);
        m_SlidesControl_NextPage = m_SlidesControl.FindAction("NextPage", throwIfNotFound: true);
        m_SlidesControl_Load = m_SlidesControl.FindAction("Load", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_Movement;
    private readonly InputAction m_Gameplay_Speak;
    public struct GameplayActions
    {
        private @PlayerInput m_Wrapper;
        public GameplayActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Gameplay_Movement;
        public InputAction @Speak => m_Wrapper.m_Gameplay_Speak;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMovement;
                @Speak.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSpeak;
                @Speak.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSpeak;
                @Speak.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSpeak;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Speak.started += instance.OnSpeak;
                @Speak.performed += instance.OnSpeak;
                @Speak.canceled += instance.OnSpeak;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);

    // SlidesControl
    private readonly InputActionMap m_SlidesControl;
    private ISlidesControlActions m_SlidesControlActionsCallbackInterface;
    private readonly InputAction m_SlidesControl_FirstPage;
    private readonly InputAction m_SlidesControl_LastPage;
    private readonly InputAction m_SlidesControl_PreviousPage;
    private readonly InputAction m_SlidesControl_NextPage;
    private readonly InputAction m_SlidesControl_Load;
    public struct SlidesControlActions
    {
        private @PlayerInput m_Wrapper;
        public SlidesControlActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @FirstPage => m_Wrapper.m_SlidesControl_FirstPage;
        public InputAction @LastPage => m_Wrapper.m_SlidesControl_LastPage;
        public InputAction @PreviousPage => m_Wrapper.m_SlidesControl_PreviousPage;
        public InputAction @NextPage => m_Wrapper.m_SlidesControl_NextPage;
        public InputAction @Load => m_Wrapper.m_SlidesControl_Load;
        public InputActionMap Get() { return m_Wrapper.m_SlidesControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SlidesControlActions set) { return set.Get(); }
        public void SetCallbacks(ISlidesControlActions instance)
        {
            if (m_Wrapper.m_SlidesControlActionsCallbackInterface != null)
            {
                @FirstPage.started -= m_Wrapper.m_SlidesControlActionsCallbackInterface.OnFirstPage;
                @FirstPage.performed -= m_Wrapper.m_SlidesControlActionsCallbackInterface.OnFirstPage;
                @FirstPage.canceled -= m_Wrapper.m_SlidesControlActionsCallbackInterface.OnFirstPage;
                @LastPage.started -= m_Wrapper.m_SlidesControlActionsCallbackInterface.OnLastPage;
                @LastPage.performed -= m_Wrapper.m_SlidesControlActionsCallbackInterface.OnLastPage;
                @LastPage.canceled -= m_Wrapper.m_SlidesControlActionsCallbackInterface.OnLastPage;
                @PreviousPage.started -= m_Wrapper.m_SlidesControlActionsCallbackInterface.OnPreviousPage;
                @PreviousPage.performed -= m_Wrapper.m_SlidesControlActionsCallbackInterface.OnPreviousPage;
                @PreviousPage.canceled -= m_Wrapper.m_SlidesControlActionsCallbackInterface.OnPreviousPage;
                @NextPage.started -= m_Wrapper.m_SlidesControlActionsCallbackInterface.OnNextPage;
                @NextPage.performed -= m_Wrapper.m_SlidesControlActionsCallbackInterface.OnNextPage;
                @NextPage.canceled -= m_Wrapper.m_SlidesControlActionsCallbackInterface.OnNextPage;
                @Load.started -= m_Wrapper.m_SlidesControlActionsCallbackInterface.OnLoad;
                @Load.performed -= m_Wrapper.m_SlidesControlActionsCallbackInterface.OnLoad;
                @Load.canceled -= m_Wrapper.m_SlidesControlActionsCallbackInterface.OnLoad;
            }
            m_Wrapper.m_SlidesControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @FirstPage.started += instance.OnFirstPage;
                @FirstPage.performed += instance.OnFirstPage;
                @FirstPage.canceled += instance.OnFirstPage;
                @LastPage.started += instance.OnLastPage;
                @LastPage.performed += instance.OnLastPage;
                @LastPage.canceled += instance.OnLastPage;
                @PreviousPage.started += instance.OnPreviousPage;
                @PreviousPage.performed += instance.OnPreviousPage;
                @PreviousPage.canceled += instance.OnPreviousPage;
                @NextPage.started += instance.OnNextPage;
                @NextPage.performed += instance.OnNextPage;
                @NextPage.canceled += instance.OnNextPage;
                @Load.started += instance.OnLoad;
                @Load.performed += instance.OnLoad;
                @Load.canceled += instance.OnLoad;
            }
        }
    }
    public SlidesControlActions @SlidesControl => new SlidesControlActions(this);
    private int m_DefaultSchemeIndex = -1;
    public InputControlScheme DefaultScheme
    {
        get
        {
            if (m_DefaultSchemeIndex == -1) m_DefaultSchemeIndex = asset.FindControlSchemeIndex("Default");
            return asset.controlSchemes[m_DefaultSchemeIndex];
        }
    }
    public interface IGameplayActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnSpeak(InputAction.CallbackContext context);
    }
    public interface ISlidesControlActions
    {
        void OnFirstPage(InputAction.CallbackContext context);
        void OnLastPage(InputAction.CallbackContext context);
        void OnPreviousPage(InputAction.CallbackContext context);
        void OnNextPage(InputAction.CallbackContext context);
        void OnLoad(InputAction.CallbackContext context);
    }
}
